* Chapter 1. Deducing
    这一章讲的主要是 C++11 和 C++14 的 type deduction。所谓 type deduction 就是
    编译器会自动从你给出的 expression 推断出他的 type 。这个过程会遵循几个不同的
    策略，比如 auto 和 decltype() 的策略就是不一样的，template function 的参数类
    型确定也和前面这两个不一样。

** Item 1: Understanding Template Type Deduction
   所谓的 template type deduction 大致是下面的这种形式
   #+BEGIN_SRC C++
   template <typename T>
   void f(ParamType param);
   #+END_SRC

   对上面那个函数的调用应该是这个形式
   #+BEGIN_SRC C++
   f(expr);
   #+END_SRC

   在编译的过程中，编译器会用 expr 的 type 来推断两个东西的类型，一个是 T, 另一
   个是 parameter 的类型 ParamType。 通常这两个不会一样，因为 ParamType 会有一些
   额外的修饰符，比如：
   #+BEGIN_SRC C++
   template <typename>
   void f(const T& param);
   #+END_SRC

   在这个情况下，T 的类型还未定，而 ParamType 则是 const T& 。不论 T 是什么类型，
   ParamType 是 reference to const T.

   这个策略根据函数参数列表中对 ParamType 的修饰可以具体分为三个情况
   1. ParamType 是指针(pointer) 或者引用(reference)
   2. ParamType is a universal reference (T&&)
   3. Paramtype is neither a pointer or a reference.

*** Case 1: ParamType is a pointer or non-universal reference   
    这种情况下，这本书的讲解方式和 Primer 里的不太一样。Primer 引入了 reference
    collapsing 的概念，但是这本书里没有提到这个。大概觉得那样做反而会更加复杂吧。。

    书中列出的，在这种情况下的策略是这样的，从 expr 的类型来做出判断
    1. 如果 expr 是个带有引用的类型，那么表示引用的那个部分直接不考虑。
    2. 去掉引用之后，考虑进 ParamType 额外的修饰符后的类型要和 expr 的类型完全一
       样， 而 T 的具体类型就是在这个过程中被确定的。

    这点用中文说出来有些难以理解，英文说得非常清楚，下面是原文
       #+BEGIN_SRC english
       1. If /expr/'s type is a reference, ignore the reference part.
       2. Then pattern-match /expr/'s type against /ParamType/ to determin T.
       #+END_SRC

    下面是例子：
    #+BEGIN_SRC C++
    template <typename T>
    void f(T &param);

    int x = 0;             // x is int
    const int cx = x;      // x is const int
    const int &rx = x;     // x is const int&

    f(x);                  // T is int; param's type is int &
    f(cx);                 // param's type is const int&, so T has type const int
    f(rx);                 // param's type is const int&, so T has type int.

    #+END_SRC

    这本书的讲解方式对读者更加友好。不过 Primer 的思路更加条理化。Primer 的思路
    是，在 T& 的情况下 T 的类型无论如何都是和 expr 的类型一样的，但是由于有 reference
    collapsing, 从而导致了这本书中说的结果。

    我们用第三个例子来说明一下 Primer 的思路。由于 rx 是 const int& , 那么 T 的
    类型同样是 const int&, 但是这样一来 param 的类型就变成 reference to
    reference 了。为了处理这种情况，语言就定义了 reference collapsing，就是如果
    以 type alias 或者 template type deduction 的情况出现了引用的引用的情况，那
    么这个类型会自动变成普通的左值引用。在这个例子中， T 的类型就从上面说的情况
    变成了普通的 reference to const int。

    有一点需要注意的是，如果 expr 是带有 const 修饰符的类型，T 也会被推断为带有
    const 修饰符的类型。这样想，如果你把一个变量设为 const 那么肯定不想让它的数
    值被更改，所以 type deduction 也要尊重你这个决定。

*** Case 2: ParamType is a universal reference
    事实上一开始我愣了一下。。这个 universal reference 是什么东西。。 

    When ParamType has type T&&, it is called universal reference. 本书的作者还
    有一篇文章专门讲了 universal reference，在那里面他提到
    
        If a variable or parameter is declared to have type T&& for some
        *deduced type* T, that variable or parameter is a universal reference. 

    ( [[https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers][这篇文章]] 详细地讲解了 universal reference 和背后的逻辑）

    这个情况的主要问题是，虽然 declared type 是 rvalue reference，但实际上的类型
    并不一定是如此，上面提到的文章里面说得很详细了，这里就说一下这种情况下编译器
    的推断策略。

    1. 如果 expr 是 lvalue，那么不论是 T 还是 param 都会被推断为 lvalue
       reference。注意这个策略中非常不寻常的地方。首先，这是编译器会推出引用类型
       的唯一情况； 第二，虽然 param 被声明的类型是 ravlue reference，但实际上被
       推断出的类型却是 lvalue reference。
    2. 如果 expr 的类型是 rvalue，策略遵循 case 1. 也就是 pattern-matching

    事实上，这里讲的就是 Primer 说得一个 exception，即当我们用 lvalue 来初始化
    T&&，的时候，T 会被视作普通的 lvalue reference。然后就是 reference
    collapsing，导致 T 和 param 的类型相同。 当然这里的说法非常简单易懂。

    
*** Case 3: ParamType is neither a pointer or a reference
    这种情况事实上就是 pass by value。 策略如下：
    1. 和 case 1 一样，无视 reference 的部分。
    2. 无视 top-level const 或者 volatile 的部分。

    这基本就是和 pass by value 的过程是一样的。唯一的注意点是 pointer 的
    low-level const 是不会被无视的

    #+BEGIN_SRC c++
    template <typename T>
    void f(T param);

    const char* const ptr = "Fun with pointers";

    f(ptr);
    #+END_SRC

    在上面的例子里，T 的类型是 const char*

*** Array Argument and Function Pointer
    虽然 array-to-pointer 和 function-to-pointer 经常被编译器自动转换，导致看起
    来 array 和 pointer 好像是同一种类型，但是事实上不是这样。
    
    #+BEGIN_SRC C++
    const char name[] = "Huanming Song";

    const char * ptrToName = name;
    #+END_SRC

    name 的类型是实实在在的数组类型：const char[14], 并不是 const char*
    
    同样地，在 template type deduction 的情况下，这种数组同样会退化成指针。当然，
    我们可以把参数类型声明成引用，这样一来就的确是数组类型了，只不过数组的大小是
    固定的。

    事实上，有了 template 之后，函数可以更灵活一点：
    #+BEGIN_SRC C++
    template <typename T, std::size_t N>
    constexpr std::size_t sizeOfArray(T (&)[N]) noexcept;
    #+END_SRC

    注意，上面这个函数。。。。它没有数组参数的名字。。。因为我们只在乎它的 size。
    如果要写出名字的话，应该是 /T (&arr)[N]/.

** Item 2: Understanding /auto/ Type Deduction
   用了 auto 修饰符的类型推断和 template parameter 的类型推断几乎是一毛一样的。
   事实上这本书还给了出了概念性的 one-to-one mapping。但是事实上有一点不同，那就
   是当 initializer 是 std::initializer_list<T> 的时候，两者的处理方法不一样。

   #+BEGIN_SRC c++ 
   auto x1 = 27;               // type is int. value is 27

   auto x2(27);

   auto x3 = { 27 };           // type is std::initializer_list<int>
   
   auto x4{ 27 };
#+END_SRC

   也就是当我们用 curly braces 来当做 initializer 的时候，auto 会将其推断为
   initializer_list 的类型。现在终于明白， Primer 中所谓的 list initialization
   实际上是用 std::initializer_list 来初始化。

   事实上，这里有两处类型推断
   1. 由于编译器看到我们用了 {} 的形式，x3 和 x4 必须被推断为 initializer_list
      的类型
   2. 但是它是个 template 我们必须用某种类型 T 来将它实例化。这就是第二层类型判
      断了。

   之所以说这是 auto 和 template parameter duduction 的不同之处是因为。。你没办
   直接让编译器推断出 std::initializer_list 的类型，下面的代码是不行的：
   #+BEGIN_SRC C++
   template <typename T>
   void f(T param);

   f({1, 2, 3});          // error! Cannot duduce type of T
   #+END_SRC

   具体为什么有这种差别。。。emm。。作者也没法想到一个合理的解释。但是我觉得
   auto 有这种 rule 应该算是合理的，毕竟 auto 的确是根据 initializer 的类型推断
   出被声明的变量的类型的。但是 template parameter 不这么做的原因可能是因为
   initializer_list 最初的目的纯粹只是用来初始化吧。。。。虽然说不太通就是了。

   在 C++14 中，事情又变得稍微麻烦了一点。。。

   在 C++14 中，可以用 auto 来让编译器帮我们自动判断一个函数的返回值类型，也可以
   用 auto specifier 来用作 lambda expression 的参数。

   但是！！！重点来了！！在这两个 C++14 的新特性中。。auto 并不是用 auto 的
   duduction 的策略…… 而是 /template type duduction/ 的策略。

   也就是说单纯的 std::initializer_list 是无法被用作推断的因素的。
   
   #+BEGIN_SRC C++
   auto createInts()
   {
       return {1, 4, 3};     // Error: can't deduce type for {1, 4, 3}               
   }


   auto resetV = [&v](const auto& newValue) { v = newValue };    // Allowed in C++14

   resetV({1, 2, 3});                                            // Not allowed!  
 #+END_SRC
** Item 3: Understanding decltype.
   decltype(expr) 在绝大多数情况下都是非常简单的，你会将 expr 声明成什么类型，
   decltype 就会返回那个类型。这也是唯二的编译器会区别对待 T 和 T& 的情况。

   注意，就和 sizeof 一样，decltype 并不会求值。

   #+BEGIN_SRC C++
   int x = 0;

   int rx = x;

   decltype(x) y1 = x;        // y1 has type int

   decltype(rx) y2 = x;       // y2 has type int&
   #+END_SRC

   decltype 的一个大用处是，让一个函数的返回值的类型取决于这个函数接收
   的 argumet 的类型。书中的用了 operator[] 作为例子。
   （虽然一般来说这个 op 的返回值是引用，但是 vector<bool> 的这个 specialization
   并非如此。）

   #+BEGIN_SRC C++
   template <typename Container, typename Index>
   auto authAndAccess(Container &c, Index i)
     -> decltype(c[i])
   {
       authenticateUser();
       return c[i];
   }
   #+END_SRC

   在上面的例子里（C++ 11)，我们只能通过 trailling return list 来实现这个方法。
   因为在写返回值的时候，首先我们还没声明函数的参数，自然无法访问它们类型；其次，
   如果要定义的是一个成员函数，在写返回值的时候我们还不在 scope 中，也没法访问想
   要访问的名称。

   如果是 C++14 trailing return list 也不需要了，因为新标准允许编译器直接推断一
   个函数的返回值类型。你可能觉得，啊这样一来就不需要 decltype 了。然而并不是。。。
   举例来说：

   #+BEGIN_SRC C++
   template <typename Container, typename Index>
   auto anthAndAccess(Container &c, Index i)
   {
       authenticateUser();
       return c[i];
   }
   #+END_SRC

   事实上这个程序是不对的，在 item 3 里面说过，auto 的类型推断策略会无视引用
   的部分，也就是说这个函数的返回值类型并不是引用，而是 c[i] 的一个copy。举例来
   说：
   #+BEGIN_SRC C++
   std::deque<int> d;
   ...
   authAndAccess(d, 5) = 10;
   #+END_SRC

   上面那行代码原本的意思是在做了用户验证之后，给 d[5] 一个新的赋值，但是实际上
   那段代码无法编译，因为函数的返回值是 int，一个 rvalue，而 C++ 不允许给 rvalue
   赋值。

   想要解决这个问题就要用一个很奇怪的 syntax: decltype(auto).

   这个语法的意思是，在推断的时候使用 decltype 的策略。
   #+BEGIN_SRC C++
   template <typename Container, typename Index>
   decltype(auto) anthAndAccess(Container &c, Index i)
   {
       authenticateUser();
       return c[i];
   }
   #+END_SRC

   上面说的都是一些正常情况，也就是 decltype 的确会返回 declared type of a
   name. 下面要说一些 “不正常” 的情况，那就是，如果你给 decltype 的表达式并不单
   纯是一个简单的名称，那么实际推断出的类型则必定是引用类型。什么意思呢？

   #+BEGIN_SRC C++
   decltype(auto) f()
   {
       int x = 0;
       ...
       return (x);
   }
   #+END_SRC

   在上面的例子里，(x) 这个表达式并不是单纯的名称（名称加了括号...) 因此返回值是
   一个 int&，于是你就欢快地坐上了一辆通往 undefined behavior 的云霄飞车。。。因
   为我们不能让函数返回一个对本地变量的引用。

   也就是说，如果你在 C++14 里用了 decltype(auto) 这种方式，那么你稍微改一下函数
   返回值那个地方的表达式可能会引起很大的问题。。。。注意不要返回对本地变量的引
   用。

*** 一些额外的小优化
    作者在这个 item 里还提到了对于那个用户认证+访问的函数的小调整。
    #+BEGIN_SRC C++
   template <typename Container, typename Index>
   decltype(auto) anthAndAccess(Container &c, Index i)
   {
       authenticateUser();
       return c[i];
   }
   #+END_SRC

   这里，函数的参数类型是对非常亮的引用，也就是说 rvalue 是没法作为函数的
   argument 的。虽然这种情况一般很少，但是作者表示可能会有人想要某个 temporary
   容器的某个位置的 copy：
   
   #+BEGIN_SRC C++
   std::deque<std::string> makeStringDeque();    // 工厂函数

   // Make copy of the 5th element of a deque returned.
   auto s = authAndAccess(makeStringDeque(), 5);
   #+END_SRC

   想要支持这种用法，只要把函数的第一个参数的类型变成 universal reference 就可以
   了。不过作者表示无论何时想要使用 universal reference 的时候，都要用
   std::forward 这个函数，具体为什么会在 item 26 里面讲。
   
   Primer 里用 forward 的理由是为了对应 lvalue 不能用来初始化 ravlue reference
   的情况，但是这个例子里我就不太明白此举的意图了。
