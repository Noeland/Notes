* Chapter 1: Getting Started
** About Version Control
1. What is VC?
   Version control is a system that record changes to a file or set of files
   overtime so that you can recall specific versions later.

2. Local Version Control
   It is like a database that keeps all changes to a files under revision
   control. A popular example is RCS which is still distributed with many
   computers. RCS works by keeping patch sets(that is, differences between
   files) in a special format on disk; it can then re-create what any file
   looked at any point in time by adding up all the patches.

3. Centralized Version Control System
   To address the problem of collaboration between developers, CVCS was
   created. These systems, such as CVS, Subversion and Perforce, has a single
   server that contains all the versioned files, and a number of clients that
   check out files from a central place. This kind of system let everyone gain a
   knowledge of what everyone else are working at and system administrator has a
   fine-grained control over accessibility of individual clients.

   However, persistence is a problem.

4. Distributed Version Control System
   In a DVCS (such as git, Mercurial, Bazaar and Darcs), clients not just
   check out the latest snapshot of the files: they fully mirror the
   repository. 

** Git Basics
1. Snapshots, Not Differences
2. Nearly every operation is local
3. Git has integrity
   Everything is git is check-summed before it is stored and is referred to by
   that checksum. This means that it is impossible to change a file or directory
   without git knowing about it.

   The mechanism that Git uses for its checksumming is called SHA-1 hash. This
   is a 40-character string composed of hexadecimal characters (0 to 9 and a to
   f) and calculated based of the content of a file or directory structure in
   Git. In fact, Git store everything in its database by those hash instead of
   the actual file name.

4. Git generally only add data
   In this case, Git will almost never do something unrecoverable.

5. The three states
   - Commited: If a particular version of a file is in git repository.
   - Modified: If a file was changed since it's been check out but not yet
     staged.
   - Staged: If a file was modified and added to the staged area.

** Configurations
1. About config
   Git configurations are stored in three different places
   - etc/gitconfig: modified with '--system' option
   - ~/.gitconfig: for current user, modified with '--global' option.
   - ./.git/config: for current repository.

   Modification to each level will overrides values in previous level.

2. Set username and email
   git config --global user.name "Huanming"
   git config --global user.email "noeland@g.ucla.edu"

3. Set editor
   git config --global core.editor emacs

4. Use git config --list to check all configurations.

* Chapter 2: Git Basics
** Ignoring files
Sometimes, there is files that you do not want git to add automatically or even
show you as untracked. You can configure your preference in a file called
'.gitignore'. 

There is a [[https://github.com/github/gitignore][useful link]] in github that maintains a fairly comprehensive list of
'.gitignore' file for different languages.

** Viewing you staged and unstaged change
1. git diff shows differences between staged files and unstaged modified files.
   Note that this command only shows differences between staged and unstaged
   files. That's why if you will get nothing if you use this command after you
   staged all your changes.

2. git diff --staged can show differences between commited and staged files.

** Skipping staged area
1. git commit -a -m 'mgs'
   This command makes git first stage all tracked files and then make a commit.

** Remove files
1. git rm
   This command removes staged file as well as the file in your working directory.
   If the file staged is modified, you have to provide an option -f (stands for
   force) in order to do the removal.

2. git rm --cached
   This command only removes the staged file but the file is still in your
   working directory.

** Moving/Renaming files
1. git mv file_from file_to
   This command is equivalent to:
   mv file_from file_to
   git rm filr_from
   git add file_to

   Git can detect renaming through this sequence of command. 

** git log
1. options
   -p show differences between each update
   --stat show change statistics
   --graph show ascii graph on branching
   --pretty=format:"foramt"

2. options for --pretty=format

Check [[https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2][this link]] for complete info.

** Undoing things
1. git commit --amend
   Modify your previous commit.
